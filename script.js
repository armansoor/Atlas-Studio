
/* ----------------- Utilities ----------------- */
const $ = (sel, root=document) => root.querySelector(sel);
const $$ = (sel, root=document) => Array.from(root.querySelectorAll(sel));

function uid() { return Math.random().toString(36).slice(2,9); }
function escapeHtml(s) { return String(s).replace(/[&<>"']/g, c=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;' }[c])); }
function humanSize(n){ const u=['B','KB','MB','GB']; let i=0; while(n>1024&&i<u.length-1){ n/=1024;i++; } return `${n.toFixed(1)} ${u[i]}`; }
function fileToDataURL(file){ return new Promise((res,rej)=>{ const fr=new FileReader(); fr.onload=()=>res(fr.result); fr.onerror=rej; fr.readAsDataURL(file); }); }

/* ----------------- State ----------------- */
const state = {
  files: [],    // {id,file,name,type,size}
  pages: [],    // {id,title,html}
  editable: false,
  settings: { splitPdf:true, renderPdfImage:false, ocrLang:'eng', buildToc:true },
  seo: { title:'Generated Site', desc:'Generated by Atlas Studio', author:'', themeColor:'#0b0d12' },
  stats: { pages:0, words:0, chars:0, images:0 }
};

/* ----------------- DOM refs ----------------- */
const fileInput = $('#fileInput');
const dropzone = $('#dropzone');
const fileQueue = $('#fileQueue');
const btnConvert = $('#btnConvert');
const btnToggleEdit = $('#btnToggleEdit');
const previewFrame = $('#preview');
const tocList = $('#tocList');
const recentList = $('#recentList');
const projectCounts = $('#projectCounts');
const chartCanvas = $('#chartWords');

/* ----------------- Init ----------------- */
applyTheme('midnight');
$('#primaryHue').addEventListener('input', e => {
  document.documentElement.style.setProperty('--brand', e.target.value);
});
$('#fontSelect').addEventListener('change', e => document.body.style.fontFamily = e.target.value);

/* Drag & Drop */
['dragenter','dragover'].forEach(ev => dropzone.addEventListener(ev, e=>{ e.preventDefault(); dropzone.classList.add('drag'); }));
['dragleave','drop'].forEach(ev => dropzone.addEventListener(ev, e=>{ e.preventDefault(); dropzone.classList.remove('drag'); }));
dropzone.addEventListener('drop', e => enqueueFiles(Array.from(e.dataTransfer.files||[])));
fileInput.addEventListener('change', ()=>enqueueFiles(Array.from(fileInput.files||[])));

/* Keyboard shortcuts */
document.addEventListener('keydown', e=>{
  const mod = e.ctrlKey || e.metaKey;
  if(mod && e.key.toLowerCase()==='s'){ e.preventDefault(); exportZip(); }
  if(mod && e.key.toLowerCase()==='e'){ e.preventDefault(); toggleEdit(); }
  if(mod && e.key.toLowerCase()==='k'){ e.preventDefault(); $('#searchGlobal').focus(); }
  if(e.key==='?'){ e.preventDefault(); alert('Shortcuts:\\nCtrl/⌘+S: Export ZIP\\nCtrl/⌘+E: Toggle Edit\\nCtrl/⌘+K: Search'); }
});

/* ----------------- File queue ----------------- */
function enqueueFiles(files){
  for(const f of files){
    const id = uid();
    state.files.push({ id, file:f, name:f.name, type:f.type, size:f.size });
    const el = document.createElement('div'); el.className='file-item'; el.id = `fi-${id}`;
    el.innerHTML = `<div><div class="name">${escapeHtml(f.name)}</div><div class="muted small">${humanSize(f.size)}</div></div><div style="flex:1"></div><div class="progress"><i id="p-${id}"></i></div>`;
    fileQueue.appendChild(el);
    const recent = document.createElement('div'); recent.className='file-item'; recent.innerHTML = `<div>${escapeHtml(f.name)}</div>`; recentList.prepend(recent);
  }
  updateProjectCounts();
}

/* ----------------- Convert pipeline ----------------- */
btnConvert.addEventListener('click', async ()=>{
  if(!state.files.length) return alert('Add files first.');
  // load settings
  state.settings.splitPdf = $('#optSplitPdf').checked;
  state.settings.renderPdfImage = $('#optRenderPdfImage').checked;
  state.settings.ocrLang = $('#ocrLang').value;
  state.settings.buildToc = $('#optBuildToc').checked;
  state.pages = []; state.stats = {pages:0, words:0, chars:0, images:0};
  for(const fentry of state.files){
    await processFile(fentry);
  }
  buildTOC();
  renderPreview();
  updateAnalytics();
});

/* Process a single file (PDF, DOCX, image, md, csv, text) */
async function processFile(entry){
  const bar = $(`#p-${entry.id}`);
  const bump = pct => bar && (bar.style.width = pct + '%');
  bump(6);
  try{
    const f = entry.file;
    const name = f.name;
    const type = (f.type || '').toLowerCase();
    if(type.includes('pdf') || name.toLowerCase().endsWith('.pdf')){
      const arr = await f.arrayBuffer(); bump(12);
      const pdf = await pdfjsLib.getDocument({data:arr}).promise; bump(18);
      const pages = pdf.numPages;
      for(let p=1;p<=pages;p++){
        const page = await pdf.getPage(p);
        const textContent = await page.getTextContent();
        const text = textContent.items.map(i=>i.str).join(' ');
        let html = `<article><h1>${escapeHtml(name)} — Page ${p}</h1><section>${escapeHtml(text)}</section>`;
        if(state.settings.renderPdfImage || state.settings.renderAllPdfImages){
          const viewport = page.getViewport({scale:1.5});
          const canvas = document.createElement('canvas'); canvas.width = viewport.width; canvas.height = viewport.height;
          const ctx = canvas.getContext('2d');
          await page.render({canvasContext:ctx, viewport}).promise;
          const dataUrl = canvas.toDataURL('image/png');
          html += `<figure><img src="${dataUrl}" alt="${escapeHtml(name)} page ${p}" loading="lazy"></figure>`;
          state.stats.images++;
        }
        html += `</article>`;
        pushPage({ title: `${name} — Page ${p}`, html });
        bump(18 + Math.round((p/pages)*70));
        if(!state.settings.splitPdf) break;
      }
    } else if(type.includes('word') || name.toLowerCase().endsWith('.docx')){
      const ab = await f.arrayBuffer(); bump(20);
      const res = await mammoth.convertToHtml({ arrayBuffer: ab }, { convertImage: mammoth.images.inline() });
      pushPage({ title: name, html: `<article>${res.value}</article>` });
      bump(90);
    } else if(type.startsWith('image/') || /\.(png|jpg|jpeg|gif|webp)$/i.test(name)){
      const dataUrl = await fileToDataURL(f); bump(25);
      const worker = Tesseract.createWorker();
      await worker.load(); await worker.loadLanguage(state.settings.ocrLang); await worker.initialize(state.settings.ocrLang);
      const { data: { text } } = await worker.recognize(f);
      await worker.terminate(); bump(85);
      pushPage({ title: name, html: `<article><h1>${escapeHtml(name)}</h1><img src="${dataUrl}" loading="lazy"><pre>${escapeHtml(text)}</pre></article>` });
      state.stats.images++;
    } else if(name.toLowerCase().endsWith('.md')){
      const txt = await f.text(); bump(40);
      const md = marked.parse(txt);
      pushPage({ title: name, html: `<article>${md}</article>` });
      bump(90);
    } else if(name.toLowerCase().endsWith('.csv')){
      const txt = await f.text(); bump(30);
      const parsed = Papa.parse(txt, { header:true });
      const headers = parsed.meta.fields || [];
      const rows = parsed.data || [];
      let table = `<table><thead><tr>${headers.map(h=>`<th>${escapeHtml(h)}</th>`).join('')}</tr></thead><tbody>${rows.map(r=>'<tr>'+headers.map(h=>`<td>${escapeHtml(String(r[h]||''))}</td>`).join('')+'</tr>').join('')}</tbody></table>`;
      pushPage({ title: name, html: `<article><h1>${escapeHtml(name)}</h1>${table}</article>` });
      bump(90);
    } else {
      const txt = await f.text(); bump(50);
      pushPage({ title: name, html: `<article><h1>${escapeHtml(name)}</h1><pre>${escapeHtml(txt)}</pre></article>` });
      bump(90);
    }
  } catch(err){
    console.error('processFile error', err);
    alert('Error processing file: ' + (err.message||err));
  }
  bump(100);
}

/* pushPage updates pages and stats */
function pushPage({title, html}){
  const id = uid();
  state.pages.push({ id, title, html });
  const plain = html.replace(/<[^>]+>/g,' ');
  state.stats.pages = state.pages.length;
  state.stats.words += (plain.trim().match(/\S+/g)||[]).length;
  state.stats.chars += plain.length;
}

/* Build host TOC */
function buildTOC(){
  tocList.innerHTML = '';
  state.pages.forEach((p, i)=>{
    const li = document.createElement('li');
    li.innerHTML = `<a href="#" data-idx="${i}">${escapeHtml(p.title)}</a>`;
    li.querySelector('a').addEventListener('click', e=>{ e.preventDefault(); scrollPreviewTo(i); });
    tocList.appendChild(li);
  });
  updateProjectCounts();
}

/* Preview (build single HTML and set iframe srcdoc) */
function renderPreview(){
  const html = buildSiteHtml({ inline:true });
  previewFrame.srcdoc = html;
  previewFrame.onload = ()=> { if(state.editable) enableEditing(true); };
}

/* Build site HTML (inline CSS/JS for preview) */
function buildSiteHtml({ inline=false }){
  const pagesHtml = state.pages.map((p,i)=>`<section id="p-${i}" class="page">${p.html}</section>`).join('\n');
  const toc = state.settings.buildToc ? `<aside class="site-toc"><ul>${state.pages.map((p,i)=>`<li><a href="#p-${i}">${escapeHtml(p.title)}</a></li>`).join('')}</ul></aside>` : '';
  const css = baseSiteCss();
  const js = baseSiteJs();
  const meta = `<meta name="description" content="${escapeHtml(state.seo.desc)}"><meta name="author" content="${escapeHtml(state.seo.author)}">`;
  return `<!doctype html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">${meta}<title>${escapeHtml(state.seo.title)}</title>${inline? `<style>${css}</style>`: '<link rel="stylesheet" href="styles.css">'} </head><body data-template="document">${toc}<main class="site-content">${pagesHtml}</main>${inline? `<script>${js}<\/script>`: '<script src="script.js"></script>'}</body></html>`;
}

/* base site CSS for exported site preview */
function baseSiteCss(){
  const brand = getComputedStyle(document.documentElement).getPropertyValue('--brand') || '#6a8dff';
  return `:root{--brand:${brand}} body{font-family:Inter,system-ui;margin:0;background:#0b0d12;color:#e9eef8} .site-content{max-width:1100px;margin:24px auto;padding:0 16px} .page{background:rgba(255,255,255,.02);padding:18px;border-radius:12px;margin-bottom:18px} .site-toc{position:sticky;top:16px;padding:12px;margin:12px} img{max-width:100%;height:auto}`;
}

/* base site JS for exported site */
function baseSiteJs(){
  return `(() => {
    document.querySelectorAll('.site-toc a').forEach(a => a.addEventListener('click', e => { e.preventDefault(); const id = a.getAttribute('href').slice(1); document.getElementById(id)?.scrollIntoView({behavior:'smooth'}); }));
    const obs = new IntersectionObserver(entries => entries.forEach(en => { if(en.isIntersecting){ const id=en.target.id; document.querySelectorAll('.site-toc a').forEach(a=>a.classList.toggle('active', a.getAttribute('href')==='#'+id)); } }), { rootMargin:'-40% 0px -55% 0px' });
    document.querySelectorAll('.page').forEach(p=>obs.observe(p));
  })();`;
}

/* Scroll preview to a page by index */
function scrollPreviewTo(index){
  const doc = previewFrame.contentDocument || previewFrame.contentWindow.document;
  const el = doc.getElementById(`p-${index}`);
  if(el) el.scrollIntoView({ behavior:'smooth', block:'start' });
}

/* Update project counts */
function updateProjectCounts(){
  projectCounts.textContent = `${state.files.length} files · ${state.pages.length} pages`;
}

/* Enable/disable editing in iframe preview */
function enableEditing(on){
  const doc = previewFrame.contentDocument || previewFrame.contentWindow.document;
  if(!doc) return;
  doc.body.contentEditable = !!on;
  state.editable = !!on;
  $('#inspectorHint').textContent = on? 'Edit mode ON' : 'Ready';
}

/* toggle edit */
function toggleEdit(){ enableEditing(!state.editable); }

/* Find in preview */
$('#btnFind').addEventListener('click', ()=> {
  const q = prompt('Find text in preview:');
  if(!q) return;
  const doc = previewFrame.contentDocument || previewFrame.contentWindow.document;
  if(!doc) return;
  const regex = new RegExp(q.replace(/[.*+?^${}()|[\]\\]/g,'\\$&'), 'gi');
  doc.body.innerHTML = doc.body.innerHTML.replace(/<mark class="hl">([^<]+)<\/mark>/g,'$1');
  doc.body.innerHTML = doc.body.innerHTML.replace(regex, m=>`<mark class="hl">${m}</mark>`);
});

/* Build analytics and chart */
function updateAnalytics(){
  $('#analytics').textContent = `${state.stats.pages} pages • ${state.stats.words} words • ${state.stats.chars} chars • ${state.stats.images} images`;
  try{ window._chart?.destroy(); }catch(e){}
  const ctx = chartCanvas.getContext('2d');
  const words = state.pages.map(p => (p.html.replace(/<[^>]+>/g,' ').trim().match(/\S+/g)||[]).length);
  window._chart = new Chart(ctx, { type:'bar', data:{ labels: state.pages.map((p,i)=>`P${i+1}`), datasets:[{label:'Words', data:words, backgroundColor:getComputedStyle(document.documentElement).getPropertyValue('--brand')||'#6a8dff'}] }, options:{ responsive:true, plugins:{legend:{display:false}} } });
}

/* Export ZIP */
$('#btnExport').addEventListener('click', exportZip);

async function exportZip(){
  if(!state.pages.length) return alert('Nothing to export. Convert files first.');
  const mode = $('#exportMode').value;
  const zip = new JSZip();
  if(mode === 'single'){
    zip.file('index.html', buildSiteHtml({ inline:true }));
  } else if(mode === 'split'){
    zip.file('index.html', buildSiteHtml({ inline:false }));
    zip.file('styles.css', baseSiteCss());
    zip.file('script.js', baseSiteJs());
  } else { // multipage
    zip.file('styles.css', baseSiteCss());
    zip.file('script.js', baseSiteJs());
    zip.file('index.html', buildIndexForMultipage());
    state.pages.forEach((p,i) => {
      zip.file(`pages/page-${i+1}.html`, baseSiteSinglePage(p,i));
    });
  }
  if($('#pwaMode').value === 'basic'){
    const {iconPng, manifest, sw} = await generatePWAAssets();
    zip.file('manifest.webmanifest', JSON.stringify(manifest, null, 2));
    zip.file('sw.js', sw);
    const base64 = iconPng.split(',')[1];
    zip.folder('icons').file('icon-512.png', base64, {base64:true});
  }
  const blob = await zip.generateAsync({type:'blob'});
  const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = 'atlas-site.zip'; a.click();
}

/* Build index and pages helpers for multipage */
function buildIndexForMultipage(){
  const css = 'styles.css'; const js = 'script.js';
  const meta = `<meta name="description" content="${escapeHtml(state.seo.desc)}">`;
  return `<!doctype html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">${meta}<title>${escapeHtml(state.seo.title)}</title><link rel="stylesheet" href="${css}"></head><body>${state.pages.length? state.pages[0].html : '<article><h1>No pages</h1></article>'}<script src="${js}"></script></body></html>`;
}
function baseSiteSinglePage(p, i){
  const css = '../styles.css'; const js = '../script.js';
  const meta = `<meta name="description" content="${escapeHtml(state.seo.desc)}">`;
  return `<!doctype html><html><head><meta charset="utf-8"><meta name="viewport" content="width=device-width,initial-scale=1">${meta}<title>${escapeHtml(p.title)}</title><link rel="stylesheet" href="${css}"></head><body>${p.html}<script src="${js}"></script></body></html>`;
}

/* PWA assets */
async function generatePWAAssets(){
  const size = 512;
  const c = document.createElement('canvas'); c.width = c.height = size;
  const ctx = c.getContext('2d');
  const brand = getComputedStyle(document.documentElement).getPropertyValue('--brand') || '#6a8dff';
  ctx.fillStyle = brand.trim(); ctx.fillRect(0,0,size,size);
  ctx.fillStyle = 'rgba(255,255,255,0.95)'; ctx.font='bold 340px Inter, sans-serif'; ctx.textAlign='center'; ctx.textBaseline='middle'; ctx.fillText('A', size/2, size/2+30);
  const png = c.toDataURL('image/png');
  const manifest = { name: state.seo.title || 'Generated Site', short_name: 'AtlasSite', start_url: '.', background_color: state.seo.themeColor || '#0b0d12', theme_color: state.seo.themeColor || '#0b0d12', display: 'standalone', icons: [{src:'icons/icon-512.png', sizes:'512x512', type:'image/png'}] };
  const sw = `self.addEventListener('install', e=>{ self.skipWaiting(); e.waitUntil(caches.open('atlas-v1').then(c=>c.addAll(['./','./index.html','./styles.css']))) }); self.addEventListener('fetch', e=>{ e.respondWith(caches.match(e.request).then(r=>r||fetch(e.request))) });`;
  return { iconPng: png, manifest, sw };
}

/* ----------------- Save / Load / Clear ----------------- */
$('#btnSave').addEventListener('click', ()=> {
  const data = { files: state.files.map(f=>({name:f.name,size:f.size,type:f.type})), pages: state.pages, settings: state.settings, seo: state.seo };
  localStorage.setItem('atlasProject', JSON.stringify(data));
  alert('Project saved in localStorage.');
});
$('#btnLoad').addEventListener('click', ()=>{
  const raw = localStorage.getItem('atlasProject'); if(!raw) return alert('No saved project.');
  const d = JSON.parse(raw); state.pages = d.pages||[]; state.settings = d.settings||state.settings; state.seo = d.seo||state.seo;
  buildTOC(); renderPreview(); updateAnalytics();
});
$('#btnNew').addEventListener('click', ()=>{ if(confirm('Start a new project?')){ state.files=[]; state.pages=[]; fileQueue.innerHTML=''; recentList.innerHTML=''; buildTOC(); renderPreview(); updateAnalytics(); updateProjectCounts(); } });

/* ----------------- Theme/Inspector control ----------------- */
$('#themeSelect').addEventListener('change', e => applyTheme(e.target.value));
function applyTheme(key){
  document.body.classList.remove('theme-light','theme-sepia','theme-solar','theme-emerald');
  if(key==='light') document.body.classList.add('theme-light');
  if(key==='sepia') document.body.classList.add('theme-sepia');
  if(key==='solar') document.body.classList.add('theme-solar');
  if(key==='emerald') document.body.classList.add('theme-emerald');
}

/* ----------------- Helpers & Init ----------------- */
function updateProjectCounts(){ projectCounts.textContent = `${state.files.length} files · ${state.pages.length} pages`; }
function buildTOC(){ tocList.innerHTML = ''; state.pages.forEach((p,i)=>{ const li = document.createElement('li'); li.innerHTML = `<a href="#" data-idx="${i}">${escapeHtml(p.title)}</a>`; li.querySelector('a').addEventListener('click', e=>{ e.preventDefault(); scrollPreviewTo(i); }); tocList.appendChild(li); }); updateProjectCounts(); }
function renderPreview(){ const html = buildSiteHtml({ inline:true }); previewFrame.srcdoc = html; previewFrame.onload = ()=> { if(state.editable) enableEditing(true); }; }
function enableEditing(on){ const doc = previewFrame.contentDocument || previewFrame.contentWindow.document; if(!doc) return; doc.body.contentEditable = !!on; state.editable = !!on; $('#inspectorHint').textContent = on? 'Edit mode ON' : 'Ready'; }

/* enqueueFiles wrapper to expose globally */
window.enqueueFiles = enqueueFiles;

/* initial render */
renderPreview();
updateAnalytics();
updateProjectCounts();

/* Expose some globals for debugging in console (optional) */
window.Atlas = { state, renderPreview, buildTOC, exportZip, enqueueFiles };
